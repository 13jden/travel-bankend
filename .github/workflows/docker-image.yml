name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run tests
      run: mvn clean test -B
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit

  build-and-deploy:
    needs: test
    runs-on: self-hosted
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=long
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Travel Spring Boot App
          org.opencontainers.image.description=乡村旅游后端服务
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "🚀 开始部署到测试环境..."
        cd /opt/travel-spring-staging
        
        # 更新镜像标签
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "使用镜像: $IMAGE_TAG"
        
        # 更新 docker-compose.yml
        sed -i "s|image: ghcr.io/.*|image: $IMAGE_TAG|g" docker-compose.yml
        
        # 拉取最新镜像并重启
        docker-compose pull travel-app
        docker-compose up -d travel-app
        
        # 等待启动
        sleep 30
        
        # 健康检查
        if curl -f http://localhost:8080/actuator/health; then
          echo "✅ 测试环境部署成功！"
        else
          echo "❌ 测试环境部署失败！"
          docker-compose logs travel-app
          exit 1
        fi
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      run: |
        echo "🚀 开始部署到生产环境..."
        cd /opt/travel-spring-production
        
        # 备份当前版本
        docker-compose ps > backup-$(date +%Y%m%d-%H%M%S).log
        
        # 更新镜像标签
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "使用镜像: $IMAGE_TAG"
        
        # 更新 docker-compose.yml
        sed -i "s|image: ghcr.io/.*|image: $IMAGE_TAG|g" docker-compose.yml
        
        # 拉取最新镜像
        docker-compose pull travel-app
        
        # 滚动更新（零停机部署）
        docker-compose up -d travel-app
        
        # 等待启动
        sleep 45
        
        # 健康检查
        if curl -f http://localhost:8080/actuator/health; then
          echo "✅ 生产环境部署成功！"
          echo "🌐 访问地址: http://$(hostname -I | awk '{print $1}'):8080"
          # 清理旧镜像
          docker image prune -f --filter "until=24h"
        else
          echo "❌ 生产环境部署失败！"
          docker-compose logs travel-app
          exit 1
        fi
        
    - name: Notify deployment result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 部署完成！"
        else
          echo "💥 部署失败，请检查日志"
        fi
